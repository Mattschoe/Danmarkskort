plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'jacoco'
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec).configureEach {
    jvmArgs('-Xmx16g')
}

tasks.withType(Test).configureEach {
    jvmArgs('-Xmx16g')
}

application {
    mainModule = 'com.example.danmarkskort'
    mainClass = 'com.example.danmarkskort.App'
    applicationDefaultJvmArgs = ['-Dstdout.encoding=UTF-8', '-Dstderr.encoding=UTF-8']
}

javafx {
    version = '23.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}
 

dependencies {
    implementation('org.controlsfx:controlsfx:11.2.1')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation 'org.junit.jupiter:junit-jupiter:5.11.1'

    implementation 'com.itextpdf:itextpdf:5.5.13.3'
    implementation 'net.sf.trove4j:trove4j:3.0.3'
    
    testImplementation 'org.testfx:testfx-core:4.0.17'
    testImplementation 'org.testfx:testfx-junit5:4.0.17'
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2' // Headless testing support
    testImplementation 'org.hamcrest:hamcrest:2.2' // For assertions


}

run {
    enableAssertions = true
}

sourceSets {
    test {
        java {
            srcDir "src/test/java"
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
    jvmArgs = [
            '--add-exports=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.ui.delegate=ALL-UNNAMED'
    ]
}


jlink {
    imageZip = project.file("${layout.buildDirectory}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}